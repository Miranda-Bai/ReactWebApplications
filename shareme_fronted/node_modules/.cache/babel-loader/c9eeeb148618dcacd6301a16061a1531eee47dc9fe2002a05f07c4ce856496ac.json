{"ast":null,"code":"// src/middleware/jsonResponse.js\nvar jsonResponse_default = opts => ({\n  onResponse: response => {\n    const contentType = response.headers[\"content-type\"] || \"\";\n    const shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n    if (!response.body || !contentType || !shouldDecode) {\n      return response;\n    }\n    return Object.assign({}, response, {\n      body: tryParse(response.body)\n    });\n  },\n  processOptions: options => Object.assign({}, options, {\n    headers: Object.assign({\n      Accept: \"application/json\"\n    }, options.headers)\n  })\n});\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body);\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`;\n    throw err;\n  }\n}\nexport { jsonResponse_default };","map":{"version":3,"mappings":";AAAA,IAAOA,uBAAQC,SAAS;EACtBC,YAAYC,YAAY;IACtB,MAAMC,cAAcD,SAASE,QAAQ,mBAAmB;IACxD,MAAMC,eAAgBL,QAAQA,KAAKM,SAAUH,YAAYI,QAAQ,kBAAkB,MAAM;IACzF,IAAI,CAACL,SAASM,QAAQ,CAACL,eAAe,CAACE,cAAc;MACnD,OAAOH;IACT;IAEA,OAAOO,OAAOC,OAAO,CAAC,GAAGR,UAAU;MAACM,MAAMG,SAAST,SAASM,IAAI;IAAC,CAAC;EACpE;EAEAI,gBAAgBC,WACdJ,OAAOC,OAAO,CAAC,GAAGG,SAAS;IACzBT,SAASK,OAAOC,OAAO;MAACI,QAAQ;IAAkB,GAAGD,QAAQT,OAAO;EACtE,CAAC;AACL;AAEA,SAASO,SAASH,MAAM;EACtB,IAAI;IACF,OAAOO,KAAKC,MAAMR,IAAI;EACxB,SAASS,KAAP;IACAA,IAAIC,UAAU,2CAA2CD,IAAIC;IAC7D,MAAMD;EACR;AACF","names":["jsonResponse_default","opts","onResponse","response","contentType","headers","shouldDecode","force","indexOf","body","Object","assign","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"sources":["/Users/Shared/Files From f.localized/GitHub/ReactWebApplications/SHAREME/shareme_fronted/node_modules/get-it/src/middleware/jsonResponse.js"],"sourcesContent":["export default opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return Object.assign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    Object.assign({}, options, {\n      headers: Object.assign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}