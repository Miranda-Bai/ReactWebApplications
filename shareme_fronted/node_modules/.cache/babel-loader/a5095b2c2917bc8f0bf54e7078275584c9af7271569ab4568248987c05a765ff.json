{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nfunction FetchXhr() {\n  this.readyState = 0; // Unsent\n}\n\nFetchXhr.prototype.open = function (method, url) {\n  this._method = method;\n  this._url = url;\n  this._resHeaders = '';\n  this.readyState = 1; // Open\n\n  this.onreadystatechange();\n};\nFetchXhr.prototype.abort = function () {\n  if (this._controller) {\n    this._controller.abort();\n  }\n};\nFetchXhr.prototype.getAllResponseHeaders = function () {\n  return this._resHeaders;\n};\nFetchXhr.prototype.setRequestHeader = function (key, value) {\n  this._headers = this._headers || {};\n  this._headers[key] = value;\n};\nFetchXhr.prototype.send = function (body) {\n  var _this = this;\n\n  // eslint-disable-next-line no-multi-assign\n  var ctrl = this._controller = typeof AbortController === 'function' && new AbortController();\n  var textBody = this.responseType !== 'arraybuffer';\n  var options = {\n    method: this._method,\n    headers: this._headers,\n    signal: ctrl && ctrl.signal || undefined,\n    body: body\n  }; // Some environments (like CloudFlare workers) don't support credentials in\n  // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n  // so for now let's just make do with a window check :/\n\n  if (typeof document !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit';\n  }\n  fetch(this._url, options).then(function (res) {\n    res.headers.forEach(function (value, key) {\n      _this._resHeaders += \"\".concat(key, \": \").concat(value, \"\\r\\n\");\n    });\n    _this.status = res.status;\n    _this.statusText = res.statusText;\n    _this.readyState = 3; // Loading\n\n    return textBody ? res.text() : res.arrayBuffer();\n  }).then(function (resBody) {\n    if (textBody) {\n      _this.responseText = resBody;\n    } else {\n      _this.response = resBody;\n    }\n    _this.readyState = 4; // Done\n\n    _this.onreadystatechange();\n  }).catch(function (err) {\n    if (err.name === 'AbortError') {\n      _this.onabort();\n      return;\n    }\n    _this.onerror(err);\n  });\n};\nvar _default = FetchXhr;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":";;;;;;;AAAA;AACA;AACA;AACA,SAASA,QAAT,GAAoB;EAClB,KAAKC,UAAL,GAAkB,CAAlB,CADkB,CACE;AACrB;;AACDD,QAAQ,CAACE,SAAT,CAAmBC,IAAnB,GAA0B,UAASC,MAAT,EAAiBC,GAAjB,EAAsB;EAC9C,KAAKC,OAAL,GAAeF,MAAf;EACA,KAAKG,IAAL,GAAYF,GAAZ;EACA,KAAKG,WAAL,GAAmB,EAAnB;EACA,KAAKP,UAAL,GAAkB,CAAlB,CAJ8C,CAI1B;;EACpB,KAAKQ,kBAAL;AACD,CAND;AAOAT,QAAQ,CAACE,SAAT,CAAmBQ,KAAnB,GAA2B,YAAW;EACpC,IAAI,KAAKC,WAAT,EAAsB;IACpB,KAAKA,WAAL,CAAiBD,KAAjB;EACD;AACF,CAJD;AAKAV,QAAQ,CAACE,SAAT,CAAmBU,qBAAnB,GAA2C,YAAW;EACpD,OAAO,KAAKJ,WAAZ;AACD,CAFD;AAGAR,QAAQ,CAACE,SAAT,CAAmBW,gBAAnB,GAAsC,UAASC,GAAT,EAAcC,KAAd,EAAqB;EACzD,KAAKC,QAAL,GAAgB,KAAKA,QAAL,IAAiB,EAAjC;EACA,KAAKA,QAAL,CAAcF,GAAd,IAAqBC,KAArB;AACD,CAHD;AAIAf,QAAQ,CAACE,SAAT,CAAmBe,IAAnB,GAA0B,UAASC,IAAT,EAAe;EAAA;;EACvC;EACA,IAAMC,IAAI,GAAI,KAAKR,WAAL,GAAmB,OAAOS,eAAP,KAA2B,UAA3B,IAAyC,IAAIA,eAAJ,EAA1E;EACA,IAAMC,QAAQ,GAAG,KAAKC,YAAL,KAAsB,aAAvC;EACA,IAAMC,OAAO,GAAG;IACdnB,MAAM,EAAE,KAAKE,OADC;IAEdkB,OAAO,EAAE,KAAKR,QAFA;IAGdS,MAAM,EAAGN,IAAI,IAAIA,IAAI,CAACM,MAAd,IAAyBC,SAHnB;IAIdR,IAAI,EAAJA;EAJc,CAAhB,CAJuC,CAWvC;EACA;EACA;;EACA,IAAI,OAAOS,QAAP,KAAoB,WAAxB,EAAqC;IACnCJ,OAAO,CAACK,WAAR,GAAsB,KAAKC,eAAL,GAAuB,SAAvB,GAAmC,MAAzD;EACD;EAEDC,KAAK,CAAC,KAAKvB,IAAN,EAAYgB,OAAZ,CAAL,CACGQ,IADH,CACQ,aAAG,EAAI;IACXC,GAAG,CAACR,OAAJ,CAAYS,OAAZ,CAAoB,UAAClB,KAAD,EAAQD,GAAR,EAAgB;MAClCoB,KAAI,CAAC1B,WAAL,cAAuBM,GAAvB,eAA+BC,KAA/B;IACD,CAFD;IAGAmB,KAAI,CAACC,MAAL,GAAcH,GAAG,CAACG,MAAlB;IACAD,KAAI,CAACE,UAAL,GAAkBJ,GAAG,CAACI,UAAtB;IACAF,KAAI,CAACjC,UAAL,GAAkB,CAAlB,CANW,CAMS;;IACpB,OAAOoB,QAAQ,GAAGW,GAAG,CAACK,IAAJ,EAAH,GAAgBL,GAAG,CAACM,WAAJ,EAA/B;EACD,CATH,EAUGP,IAVH,CAUQ,iBAAO,EAAI;IACf,IAAIV,QAAJ,EAAc;MACZa,KAAI,CAACK,YAAL,GAAoBC,OAApB;IACD,CAFD,MAEO;MACLN,KAAI,CAACO,QAAL,GAAgBD,OAAhB;IACD;IACDN,KAAI,CAACjC,UAAL,GAAkB,CAAlB,CANe,CAMK;;IACpBiC,KAAI,CAACzB,kBAAL;EACD,CAlBH,EAmBGiC,KAnBH,CAmBS,aAAG,EAAI;IACZ,IAAIC,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;MAC7BV,KAAI,CAACW,OAAL;MACA;IACD;IAEDX,KAAI,CAACY,OAAL,CAAaH,GAAb;EACD,CA1BH;AA2BD,CA7CD;eA+Ce3C,Q","names":["FetchXhr","readyState","prototype","open","method","url","_method","_url","_resHeaders","onreadystatechange","abort","_controller","getAllResponseHeaders","setRequestHeader","key","value","_headers","send","body","ctrl","AbortController","textBody","responseType","options","headers","signal","undefined","document","credentials","withCredentials","fetch","then","res","forEach","_this","status","statusText","text","arrayBuffer","responseText","resBody","response","catch","err","name","onabort","onerror"],"sources":["/Users/Shared/Files From f.localized/GitHub/ReactWebApplications/SHAREME/shareme_fronted/node_modules/get-it/src/request/browser/fetchXhr.js"],"sourcesContent":["/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nfunction FetchXhr() {\n  this.readyState = 0 // Unsent\n}\nFetchXhr.prototype.open = function(method, url) {\n  this._method = method\n  this._url = url\n  this._resHeaders = ''\n  this.readyState = 1 // Open\n  this.onreadystatechange()\n}\nFetchXhr.prototype.abort = function() {\n  if (this._controller) {\n    this._controller.abort()\n  }\n}\nFetchXhr.prototype.getAllResponseHeaders = function() {\n  return this._resHeaders\n}\nFetchXhr.prototype.setRequestHeader = function(key, value) {\n  this._headers = this._headers || {}\n  this._headers[key] = value\n}\nFetchXhr.prototype.send = function(body) {\n  // eslint-disable-next-line no-multi-assign\n  const ctrl = (this._controller = typeof AbortController === 'function' && new AbortController())\n  const textBody = this.responseType !== 'arraybuffer'\n  const options = {\n    method: this._method,\n    headers: this._headers,\n    signal: (ctrl && ctrl.signal) || undefined,\n    body\n  }\n\n  // Some environments (like CloudFlare workers) don't support credentials in\n  // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n  // so for now let's just make do with a window check :/\n  if (typeof document !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit'\n  }\n\n  fetch(this._url, options)\n    .then(res => {\n      res.headers.forEach((value, key) => {\n        this._resHeaders += `${key}: ${value}\\r\\n`\n      })\n      this.status = res.status\n      this.statusText = res.statusText\n      this.readyState = 3 // Loading\n      return textBody ? res.text() : res.arrayBuffer()\n    })\n    .then(resBody => {\n      if (textBody) {\n        this.responseText = resBody\n      } else {\n        this.response = resBody\n      }\n      this.readyState = 4 // Done\n      this.onreadystatechange()\n    })\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        this.onabort()\n        return\n      }\n\n      this.onerror(err)\n    })\n}\n\nexport default FetchXhr\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}