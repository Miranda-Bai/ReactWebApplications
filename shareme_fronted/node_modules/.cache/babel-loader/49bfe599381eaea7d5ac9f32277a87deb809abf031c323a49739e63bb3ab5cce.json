{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createRequester;\nvar _nanoPubsub = _interopRequireDefault(require(\"nano-pubsub\"));\nvar _middlewareReducer = _interopRequireDefault(require(\"./util/middlewareReducer\"));\nvar _defaultOptionsProcessor = _interopRequireDefault(require(\"./middleware/defaultOptionsProcessor\"));\nvar _defaultOptionsValidator = _interopRequireDefault(require(\"./middleware/defaultOptionsValidator\"));\nvar _request = _interopRequireDefault(require(\"./request\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// node-request in node, browser-request in browsers\n// Workaround default export weirdness\nvar pubsub = 'default' in _nanoPubsub.default ? _nanoPubsub.default.default : _nanoPubsub.default;\nvar channelNames = ['request', 'response', 'progress', 'error', 'abort'];\nvar middlehooks = ['processOptions', 'validateOptions', 'interceptRequest', 'finalizeOptions', 'onRequest', 'onResponse', 'onError', 'onReturn', 'onHeaders'];\nfunction createRequester() {\n  var initMiddleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var httpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _request.default;\n  var loadedMiddleware = [];\n  var middleware = middlehooks.reduce(function (ware, name) {\n    ware[name] = ware[name] || [];\n    return ware;\n  }, {\n    processOptions: [_defaultOptionsProcessor.default],\n    validateOptions: [_defaultOptionsValidator.default]\n  });\n  function request(opts) {\n    var channels = channelNames.reduce(function (target, name) {\n      target[name] = pubsub();\n      return target;\n    }, {}); // Prepare a middleware reducer that can be reused throughout the lifecycle\n\n    var applyMiddleware = (0, _middlewareReducer.default)(middleware); // Parse the passed options\n\n    var options = applyMiddleware('processOptions', opts); // Validate the options\n\n    applyMiddleware('validateOptions', options); // Build a context object we can pass to child handlers\n\n    var context = {\n      options: options,\n      channels: channels,\n      applyMiddleware: applyMiddleware\n    }; // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n\n    var ongoingRequest = null;\n    var unsubscribe = channels.request.subscribe(function (ctx) {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, function (err, res) {\n        return onResponse(err, res, ctx);\n      });\n    }); // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n\n    channels.abort.subscribe(function () {\n      unsubscribe();\n      if (ongoingRequest) {\n        ongoingRequest.abort();\n      }\n    }); // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n\n    var returnValue = applyMiddleware('onReturn', channels, context); // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n\n    if (returnValue === channels) {\n      channels.request.publish(context);\n    }\n    return returnValue;\n    function onResponse(reqErr, res, ctx) {\n      var error = reqErr;\n      var response = res; // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx);\n        } catch (err) {\n          response = null;\n          error = err;\n        }\n      } // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n\n      error = error && applyMiddleware('onError', error, ctx); // Figure out if we should publish on error/response channels\n\n      if (error) {\n        channels.error.publish(error);\n      } else if (response) {\n        channels.response.publish(response);\n      }\n    }\n  }\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value');\n    }\n    if (typeof newMiddleware === 'function') {\n      throw new Error('Tried to add middleware that was a function. It probably expects you to pass options to it.');\n    }\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error('Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event');\n    }\n    middlehooks.forEach(function (key) {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key]);\n      }\n    });\n    loadedMiddleware.push(newMiddleware);\n    return request;\n  };\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware);\n  };\n  initMiddleware.forEach(request.use);\n  return request;\n}\nmodule.exports = exports.default;","map":{"version":3,"mappings":"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","names":["pubsub","_pubsub","default","channelNames","middlehooks","createRequester","initMiddleware","httpRequest","httpRequester","loadedMiddleware","middleware","reduce","ware","name","processOptions","validateOptions","request","opts","channels","target","applyMiddleware","options","context","ongoingRequest","unsubscribe","subscribe","ctx","err","res","onResponse","abort","returnValue","publish","reqErr","error","response","use","newMiddleware","Error","onReturn","length","forEach","key","push","clone"],"sources":["/Users/Shared/Files From f.localized/GitHub/ReactWebApplications/SHAREME/shareme_fronted/node_modules/get-it/src/index.js"],"sourcesContent":["import _pubsub from 'nano-pubsub'\nimport middlewareReducer from './util/middlewareReducer'\nimport processOptions from './middleware/defaultOptionsProcessor'\nimport validateOptions from './middleware/defaultOptionsValidator'\nimport httpRequester from './request' // node-request in node, browser-request in browsers\n\n// Workaround default export weirdness\nconst pubsub = 'default' in _pubsub ? _pubsub.default : _pubsub\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders'\n]\n\nexport default function createRequester(initMiddleware = [], httpRequest = httpRequester) {\n  const loadedMiddleware = []\n  const middleware = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions]\n    }\n  )\n\n  function request(opts) {\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest = null\n    const unsubscribe = channels.request.subscribe(ctx => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr, res, ctx) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}