{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _sameOrigin = _interopRequireDefault(require(\"same-origin\"));\nvar _parseHeaders = _interopRequireDefault(require(\"parse-headers\"));\nvar _fetchXhr = _interopRequireDefault(require(\"./browser/fetchXhr\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/* eslint max-depth: [\"error\", 4] */\nvar noop = function noop() {\n  /* intentional noop */\n};\nvar win = typeof document === 'undefined' || typeof window === 'undefined' ? undefined : window;\nvar adapter = win ? 'xhr' : 'fetch';\nvar XmlHttpRequest = typeof XMLHttpRequest === 'function' ? XMLHttpRequest : noop;\nvar hasXhr2 = ('withCredentials' in new XmlHttpRequest()); // eslint-disable-next-line no-undef\n\nvar XDR = typeof XDomainRequest === 'undefined' ? undefined : XDomainRequest;\nvar CrossDomainRequest = hasXhr2 ? XmlHttpRequest : XDR; // Fallback to fetch-based XHR polyfill for non-browser environments like Workers\n\nif (!win) {\n  XmlHttpRequest = _fetchXhr.default;\n  CrossDomainRequest = _fetchXhr.default;\n}\nvar _default = function _default(context, callback) {\n  var opts = context.options;\n  var options = context.applyMiddleware('finalizeOptions', opts);\n  var timers = {}; // Deep-checking window.location because of react native, where `location` doesn't exist\n\n  var cors = win && win.location && !(0, _sameOrigin.default)(win.location.href, options.url); // Allow middleware to inject a response, for instance in the case of caching or mocking\n\n  var injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter: adapter,\n    context: context\n  }); // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n\n  if (injectedResponse) {\n    var cbTimer = setTimeout(callback, 0, null, injectedResponse);\n    var cancel = function cancel() {\n      return clearTimeout(cbTimer);\n    };\n    return {\n      abort: cancel\n    };\n  } // We'll want to null out the request on success/failure\n\n  var xhr = cors ? new CrossDomainRequest() : new XmlHttpRequest();\n  var isXdr = win && win.XDomainRequest && xhr instanceof win.XDomainRequest;\n  var headers = options.headers;\n  var delays = options.timeout; // Request state\n\n  var aborted = false;\n  var loaded = false;\n  var timedOut = false; // Apply event handlers\n\n  xhr.onerror = onError;\n  xhr.ontimeout = onError;\n  xhr.onabort = function () {\n    stopTimers(true);\n    aborted = true;\n  }; // IE9 must have onprogress be set to a unique function\n\n  xhr.onprogress = function () {\n    /* intentional noop */\n  };\n  var loadEvent = isXdr ? 'onload' : 'onreadystatechange';\n  xhr[loadEvent] = function () {\n    // Prevent request from timing out\n    resetTimers();\n    if (aborted || xhr.readyState !== 4 && !isXdr) {\n      return;\n    } // Will be handled by onError\n\n    if (xhr.status === 0) {\n      return;\n    }\n    onLoad();\n  }; // @todo two last options to open() is username/password\n\n  xhr.open(options.method, options.url, true // Always async\n  ); // Some options need to be applied after open\n\n  xhr.withCredentials = !!options.withCredentials; // Set headers\n\n  if (headers && xhr.setRequestHeader) {\n    for (var key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  } else if (headers && isXdr) {\n    throw new Error('Headers cannot be set on an XDomainRequest object');\n  }\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer';\n  } // Let middleware know we're about to do a request\n\n  context.applyMiddleware('onRequest', {\n    options: options,\n    adapter: adapter,\n    request: xhr,\n    context: context\n  });\n  xhr.send(options.body || null); // Figure out which timeouts to use (if any)\n\n  if (delays) {\n    timers.connect = setTimeout(function () {\n      return timeoutRequest('ETIMEDOUT');\n    }, delays.connect);\n  }\n  return {\n    abort: abort\n  };\n  function abort() {\n    aborted = true;\n    if (xhr) {\n      xhr.abort();\n    }\n  }\n  function timeoutRequest(code) {\n    timedOut = true;\n    xhr.abort();\n    var error = new Error(code === 'ESOCKETTIMEDOUT' ? \"Socket timed out on request to \".concat(options.url) : \"Connection timed out on request to \".concat(options.url));\n    error.code = code;\n    context.channels.error.publish(error);\n  }\n  function resetTimers() {\n    if (!delays) {\n      return;\n    }\n    stopTimers();\n    timers.socket = setTimeout(function () {\n      return timeoutRequest('ESOCKETTIMEDOUT');\n    }, delays.socket);\n  }\n  function stopTimers(force) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || xhr.readyState >= 2 && timers.connect) {\n      clearTimeout(timers.connect);\n    }\n    if (timers.socket) {\n      clearTimeout(timers.socket);\n    }\n  }\n  function onError(error) {\n    if (loaded) {\n      return;\n    } // Clean up\n\n    stopTimers(true);\n    loaded = true;\n    xhr = null; // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n\n    var err = error || new Error(\"Network error while attempting to reach \".concat(options.url));\n    err.isNetworkError = true;\n    err.request = options;\n    callback(err);\n  }\n  function reduceResponse() {\n    var statusCode = xhr.status;\n    var statusMessage = xhr.statusText;\n    if (isXdr && statusCode === undefined) {\n      // IE8 CORS GET successful response doesn't have a status field, but body is fine\n      statusCode = 200;\n    } else if (statusCode > 12000 && statusCode < 12156) {\n      // Yet another IE quirk where it emits weird status codes on network errors\n      // https://support.microsoft.com/en-us/kb/193625\n      return onError();\n    } else {\n      // Another IE bug where HTTP 204 somehow ends up as 1223\n      statusCode = xhr.status === 1223 ? 204 : xhr.status;\n      statusMessage = xhr.status === 1223 ? 'No Content' : statusMessage;\n    }\n    return {\n      body: xhr.response || xhr.responseText,\n      url: options.url,\n      method: options.method,\n      headers: isXdr ? {} : (0, _parseHeaders.default)(xhr.getAllResponseHeaders()),\n      statusCode: statusCode,\n      statusMessage: statusMessage\n    };\n  }\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return;\n    }\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'));\n      return;\n    } // Prevent being called twice\n\n    stopTimers();\n    loaded = true;\n    callback(null, reduceResponse());\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"mappings":"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","names":["noop","win","document","window","undefined","adapter","XmlHttpRequest","XMLHttpRequest","hasXhr2","XDR","XDomainRequest","CrossDomainRequest","FetchXhr","context","callback","opts","options","applyMiddleware","timers","cors","location","href","url","injectedResponse","cbTimer","setTimeout","cancel","clearTimeout","abort","xhr","isXdr","headers","delays","timeout","aborted","loaded","timedOut","onerror","onError","ontimeout","onabort","stopTimers","onprogress","loadEvent","resetTimers","readyState","status","onLoad","open","method","withCredentials","setRequestHeader","key","hasOwnProperty","Error","rawBody","responseType","request","send","body","connect","timeoutRequest","code","error","channels","publish","socket","force","err","isNetworkError","reduceResponse","statusCode","statusMessage","statusText","response","responseText","getAllResponseHeaders"],"sources":["/Users/Shared/Files From f.localized/GitHub/ReactWebApplications/SHAREME/shareme_fronted/node_modules/get-it/src/request/browser-request.js"],"sourcesContent":["/* eslint max-depth: [\"error\", 4] */\nimport sameOrigin from 'same-origin'\nimport parseHeaders from 'parse-headers'\nimport FetchXhr from './browser/fetchXhr'\n\nconst noop = function() {\n  /* intentional noop */\n}\n\nconst win = typeof document === 'undefined' || typeof window === 'undefined' ? undefined : window\nconst adapter = win ? 'xhr' : 'fetch'\n\nlet XmlHttpRequest = typeof XMLHttpRequest === 'function' ? XMLHttpRequest : noop\nconst hasXhr2 = 'withCredentials' in new XmlHttpRequest()\n// eslint-disable-next-line no-undef\nconst XDR = typeof XDomainRequest === 'undefined' ? undefined : XDomainRequest\nlet CrossDomainRequest = hasXhr2 ? XmlHttpRequest : XDR\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nif (!win) {\n  XmlHttpRequest = FetchXhr\n  CrossDomainRequest = FetchXhr\n}\n\nexport default (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts)\n  const timers = {}\n\n  // Deep-checking window.location because of react native, where `location` doesn't exist\n  const cors = win && win.location && !sameOrigin(win.location.href, options.url)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = cors ? new CrossDomainRequest() : new XmlHttpRequest()\n\n  const isXdr = win && win.XDomainRequest && xhr instanceof win.XDomainRequest\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = onError\n  xhr.ontimeout = onError\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  // IE9 must have onprogress be set to a unique function\n  xhr.onprogress = () => {\n    /* intentional noop */\n  }\n\n  const loadEvent = isXdr ? 'onload' : 'onreadystatechange'\n  xhr[loadEvent] = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || (xhr.readyState !== 4 && !isXdr)) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method,\n    options.url,\n    true // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  } else if (headers && isXdr) {\n    throw new Error('Headers cannot be set on an XDomainRequest object')\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code) {\n    timedOut = true\n    xhr.abort()\n    const error = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    xhr = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = error || new Error(`Network error while attempting to reach ${options.url}`)\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse() {\n    let statusCode = xhr.status\n    let statusMessage = xhr.statusText\n\n    if (isXdr && statusCode === undefined) {\n      // IE8 CORS GET successful response doesn't have a status field, but body is fine\n      statusCode = 200\n    } else if (statusCode > 12000 && statusCode < 12156) {\n      // Yet another IE quirk where it emits weird status codes on network errors\n      // https://support.microsoft.com/en-us/kb/193625\n      return onError()\n    } else {\n      // Another IE bug where HTTP 204 somehow ends up as 1223\n      statusCode = xhr.status === 1223 ? 204 : xhr.status\n      statusMessage = xhr.status === 1223 ? 'No Content' : statusMessage\n    }\n\n    return {\n      body: xhr.response || xhr.responseText,\n      url: options.url,\n      method: options.method,\n      headers: isXdr ? {} : parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: statusCode,\n      statusMessage: statusMessage\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}