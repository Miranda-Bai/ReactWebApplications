{"ast":null,"code":"// src/middleware/injectResponse.js\nvar injectResponse_default = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (typeof opts.inject !== \"function\") {\n    throw new Error(\"`injectResponse` middleware requires a `inject` function\");\n  }\n  function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue);\n    if (!response) {\n      return prevValue;\n    }\n    const options = event.context.options;\n    return Object.assign({}, {\n      body: \"\",\n      url: options.url,\n      method: options.method,\n      headers: {},\n      statusCode: 200,\n      statusMessage: \"OK\"\n    }, response);\n  }\n  return {\n    interceptRequest: inject\n  };\n};\nexport { injectResponse_default };","map":{"version":3,"mappings":";AAAA,IAAOA,yBAAQ,YAAe;EAAA,IAAdC,2EAAO,CAAC;EACtB,IAAI,OAAOA,KAAKC,WAAW,YAAY;IACrC,MAAM,IAAIC,MAAM,0DAA0D;EAC5E;EAEA,SAASD,OAAOE,WAAWC,OAAO;IAChC,MAAMC,WAAWL,KAAKC,OAAOG,OAAOD,SAAS;IAC7C,IAAI,CAACE,UAAU;MACb,OAAOF;IACT;IAGA,MAAMG,UAAUF,MAAMG,QAAQD;IAC9B,OAAOE,OAAOC,OACZ,CAAC,GACD;MACEC,MAAM;MACNC,KAAKL,QAAQK;MACbC,QAAQN,QAAQM;MAChBC,SAAS,CAAC;MACVC,YAAY;MACZC,eAAe;IACjB,GACAV,SACF;EACF;EAEA,OAAO;IAACW,kBAAkBf;EAAM;AAClC","names":["injectResponse_default","opts","inject","Error","prevValue","event","response","options","context","Object","assign","body","url","method","headers","statusCode","statusMessage","interceptRequest"],"sources":["/Users/Shared/Files From f.localized/GitHub/ReactWebApplications/SHAREME/shareme_fronted/node_modules/get-it/src/middleware/injectResponse.js"],"sourcesContent":["export default (opts = {}) => {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return Object.assign(\n      {},\n      {\n        body: '',\n        url: options.url,\n        method: options.method,\n        headers: {},\n        statusCode: 200,\n        statusMessage: 'OK'\n      },\n      response\n    )\n  }\n\n  return {interceptRequest: inject}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}