import {
  PaneItem
} from "./chunk-W5I7T4GR.js";
import {
  useDeskTool
} from "./chunk-V2SW5MNW.js";
import "./chunk-Y3GX6K72.js";
import {
  BackLink,
  Pane,
  PaneContent,
  PaneHeader,
  PaneHeaderActions,
  _DEBUG,
  usePaneLayout
} from "./chunk-VKUTW27G.js";
import {
  ArrowLeftIcon,
  Box,
  Button,
  Stack,
  require_omit,
  styled_components_browser_esm_default
} from "./chunk-GGNZPCY7.js";
import {
  require_jsx_runtime
} from "./chunk-TI3Q3POO.js";
import {
  __toESM,
  require_react
} from "./chunk-PCJDMKSA.js";

// node_modules/sanity/lib/_chunks/index-c4ff7039.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var import_omit = __toESM(require_omit());
var _templateObject;
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var Divider = styled_components_browser_esm_default.hr(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n"])));
function ListPane(props) {
  const {
    childItemId,
    index,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const {
    features
  } = useDeskTool();
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  const {
    defaultLayout,
    displayOptions,
    items,
    menuItems,
    menuItemGroups,
    title
  } = pane;
  const paneShowIcons = displayOptions == null ? void 0 : displayOptions.showIcons;
  const shouldShowIconForItem = (item) => {
    var _a;
    const itemShowIcon = (_a = item.displayOptions) == null ? void 0 : _a.showIcon;
    if (typeof itemShowIcon !== "undefined") {
      return itemShowIcon !== false;
    }
    return paneShowIcons !== false;
  };
  return (0, import_jsx_runtime.jsxs)(Pane, {
    currentMaxWidth: 350,
    "data-testid": "desk-tool-list-pane",
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected,
    children: [_DEBUG, (0, import_jsx_runtime.jsx)(PaneHeader, {
      actions: (0, import_jsx_runtime.jsx)(PaneHeaderActions, {
        menuItems,
        menuItemGroups
      }),
      backButton: features.backButton && index > 0 && (0, import_jsx_runtime.jsx)(Button, {
        as: BackLink,
        "data-as": "a",
        icon: ArrowLeftIcon,
        mode: "bleed"
      }),
      title
    }), (0, import_jsx_runtime.jsx)(PaneContent, {
      overflow: layoutCollapsed ? void 0 : "auto",
      children: (0, import_jsx_runtime.jsx)(Stack, {
        padding: 2,
        space: 1,
        children: items && items.map((item, itemIndex) => {
          if (item.type === "divider") {
            return (
              // eslint-disable-next-line react/no-array-index-key
              (0, import_jsx_runtime.jsx)(Box, {
                paddingY: 1,
                children: (0, import_jsx_runtime.jsx)(Divider, {})
              }, "divider-".concat(itemIndex))
            );
          }
          const pressed = !isActive && childItemId === item.id;
          const selected = isActive && childItemId === item.id;
          return (0, import_jsx_runtime.jsx)(PaneItem, {
            icon: shouldShowIconForItem(item) ? item.icon : false,
            id: item.id,
            layout: defaultLayout,
            pressed,
            schemaType: item.schemaType,
            selected,
            title: item.title,
            value: (
              // If this is a document list item, pass on the ID and type,
              // otherwise leave it undefined to use the passed title and gang
              item._id && item.schemaType ? {
                _id: item._id,
                _type: item.schemaType.name,
                title: item.title
              } : void 0
            )
          }, item.id);
        })
      })
    })]
  });
}
export {
  ListPane as default
};
//# sourceMappingURL=index-c4ff7039-23U4B635.js.map
